name: Start Mac Box
on:
  workflow_dispatch:
    inputs:
#       debug_enabled:
#         description: 'Run the work flow with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
#         required: false
#         default: 'false'
      timeout:
        description: 'How long will the box up? (in minutes)'     
        required: true
        default: '330'
      isSelfhostedServer:
        description: 'Is tmate server selfhosted?'     
        required: true
        default: 'false'
defaults:
  run:
    shell: bash
jobs:
  Start:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
#     - name: Switch to cocoapods version 1.10.1
#       run: |
#         gem uninstall cocoapods --executables --all && \
#         gem install cocoapods --version 1.10.1
    # Enable tmate debugging of manually-triggered workflows if the input option was provided
#     - name: Install Flutter
#       uses: subosito/flutter-action@v1.5.3
#       with:
#           channel: 'stable'
#           flutter-version: '2.2.3'
#       run: |
#         rm -rf "$HOME/Library/flutter" && \
#         cd "$HOME/Downloads" && \
#         wget -O flutter.zip "https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_2.2.3-stable.zip" && \
#         cd "$HOME/Library" && \
#         unzip "$HOME/Downloads/flutter.zip" && \
#         echo "export PATH=\"\$HOME/Library/flutter/bin:\$PATH\"" >> "$HOME/.bashrc" && \
#         source "$HOME/.bashrc" && \
#         cat "$HOME/.bashrc" && \
#         echo "$PATH" && \
#         which flutter
    - name: Verify Flutter Instalation
      run: |
        #ls -l "$HOME/Library" && \
        #ls -l "$HOME/Library/flutter" && \
        #cat "$HOME/.bashrc" && \
        #echo "$PATH" && \
        #which flutter && \
        #flutter --version && \
        #flutter config --no-analytics && \
        #yes | flutter doctor --android-licenses -v && \
        #flutter doctor && \
        java -version && \
        # select right version for xcode and pod
        sudo xcode-select --switch /Applications/Xcode_12.4.app/Contents/Developer && \
        xcodebuild -version
        #gem uninstall cocoapods --executables --all && \
        #gem install cocoapods --version 1.10.1 && \
        #gem list '^cocoapods$' --no-verbose
#     - name: Install tmate client
#       run: |
#         # install tmate client
#         brew install tmate
    - name: Preparing stuff
      env:
        IS_SELFHOSTED_SERVER: ${{ github.event.inputs.isSelfhostedServer }}
        PUB_KEY_4_MMB: ${{ secrets.PUB_KEY_4_MMB }}
        PRV_KEY_4_MMB: ${{ secrets.PRV_KEY_4_MMB }}
        KNOWN_HOSTS_ENTRY: ${{ secrets.KNOWN_HOSTS_ENTRY }}
        TMATE_SERVER_CFG: ${{ secrets.TMATE_SERVER_CFG }}
      run: |
        # call utility function to setup config
        source ./main.sh && \
        preparingStuff
    - name: Start tmate session
      env:
        TMAK: ${{ secrets.TMAK }}
        TIME_TO_ALIVE: ${{ github.event.inputs.timeout }}
        NGROCK_AUTH_TOKEN: ${{ secrets.NGROCK_AUTH_TOKEN }}
        PUB_KEY_4_MMB: ${{ secrets.PUB_KEY_4_MMB }}
      # if: ${{ failure() }}
#       if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
      # run: |
        # echo "public IP => $(curl -s ifconfig.me)" && \
        # get installed version
        # tmate -V && \
        # run
        # source ./main.sh && \
        # runMyMacWithNGRock
        # ssh-add ~/.ssh/mymacbox_rsa
        # ssh -R 22840:127.0.0.1:22 tunnel.us.ngrok.com tcp
      uses: mdelillo/ssh-server-action@v1
      with:
        ngrok-authtoken: "$NGROCK_AUTH_TOKEN"
        ssh-public-key: "$PUB_KEY_4_MMB"
      #uses: mxschmitt/action-tmate@v3
      #with:
      #  sudo: false
      #  limit-access-to-actor: true
      #timeout-minutes: 60
#     - name: open tunnel
#       env:
#         SSHORP: ${{ secrets.SSHORP }}
#         SSHUSR: ${{ secrets.SSHUSR }}
#         SSHSER: ${{ secrets.SSHSER }}
#         SSHPOT: ${{ secrets.SSHPOT }}
#         TIME_TO_ALIVE: ${{ github.event.inputs.timeout }}
#       run: |
#         source ./main.sh && \
#         openTunnel
